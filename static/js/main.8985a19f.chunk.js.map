{"version":3,"sources":["component/Todo/index.jsx","component/TodoForm/index.jsx","component/Header/index.jsx","component/Instructions/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","completeTodo","removeTodo","className","style","textDecoration","isCompleted","text","onClick","role","aria-label","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","Header","Instructions","App","todos","setTodos","newTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+TAyBeA,MAvBf,YAA0D,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,WACzC,OACE,yBACEC,UAAU,OACVC,MAAO,CAAEC,eAAgBN,EAAKO,YAAc,eAAiB,KAE5DP,EAAKQ,KAEN,6BACE,4BAAQJ,UAAU,aAAaK,QAAS,kBAAMP,EAAaD,KACzD,0BAAMS,KAAK,MAAMC,aAAW,SAA5B,iBAIF,4BAAQP,UAAU,cAAcK,QAAS,kBAAMN,EAAWF,KACxD,0BAAMS,KAAK,MAAMC,aAAW,UAA5B,c,MCQKC,MAtBf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHC,mBAAS,IADN,mBACtBC,EADsB,KACfC,EADe,KAU7B,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACGJ,IACLF,EAAQE,GACRC,EAAS,OAKP,2BACEI,KAAK,OACLhB,UAAU,QACVW,MAAOA,EACPM,SAAU,SAACH,GAAD,OAAOF,EAASE,EAAEI,OAAOP,Y,MCR5BQ,MARf,WACE,OACE,6BACE,kD,MCQSC,MAXf,WACE,OACE,+DACoC,IAClC,0BAAMd,KAAK,MAAMC,aAAW,UAA5B,kBC4CSc,MA9Cf,WAAgB,IAAD,EACaX,mBAAS,CACjC,CAAEN,KAAM,gBAAiBD,aAAa,GACtC,CAAEC,KAAM,kBAAmBD,aAAa,GACxC,CAAEC,KAAM,cAAeD,aAAa,KAJzB,mBACNmB,EADM,KACCC,EADD,KAYPzB,EAAe,SAACD,GACpB,IAAM2B,EAAQ,YAAOF,GACrBE,EAAS3B,GAAOM,aAAc,EAC9BoB,EAASC,IAGLzB,EAAa,SAACF,GAClB,IAAM2B,EAAQ,YAAOF,GACrBE,EAASC,OAAO5B,EAAO,GACvB0B,EAASC,IAGX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACb,kBAAC,EAAD,CAAUS,QAtBA,SAACL,GACf,IAAMoB,EAAQ,sBAAOF,GAAP,CAAc,CAAElB,UAC9BmB,EAASC,OAsBP,yBAAKxB,UAAU,aACZsB,EAAMI,KAAI,SAAC9B,EAAMC,GAAP,OACT,kBAAC,EAAD,CACE8B,IAAK9B,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,UC/BJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8985a19f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Todo.css\";\r\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\r\n  return (\r\n    <div\r\n      className=\"todo\"\r\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\r\n    >\r\n      {todo.text}\r\n\r\n      <div>\r\n        <button className=\"check-mark\" onClick={() => completeTodo(index)}>\r\n          <span role=\"img\" aria-label=\"check\">\r\n            ‚úîÔ∏è\r\n          </span>\r\n        </button>\r\n        <button className=\"delete-mark\" onClick={() => removeTodo(index)}>\r\n          <span role=\"img\" aria-label=\"delete\">\r\n            ‚ùå\r\n          </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport \"./TodoForm.css\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        className=\"input\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <h1> Your to-do List</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Instructions.css\";\r\n\r\nfunction Instructions() {\r\n  return (\r\n    <p>\r\n      Please add your tasks today below{\" \"}\r\n      <span role=\"img\" aria-label=\"signal\">\r\n        üëá\r\n      </span>\r\n    </p>\r\n  );\r\n}\r\n\r\nexport default Instructions;\r\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport { Todo, TodoForm, Header, Instructions } from \"./component\";\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    { text: \"Clean my room\", isCompleted: false },\n    { text: \"Read a new book\", isCompleted: false },\n    { text: \"Learn React\", isCompleted: false },\n  ]);\n\n  const addTodo = (text) => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = true;\n    setTodos(newTodos);\n  };\n\n  const removeTodo = (index) => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <Instructions />\n      <div className=\"add-input\">\n        <TodoForm addTodo={addTodo} />\n      </div>\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}